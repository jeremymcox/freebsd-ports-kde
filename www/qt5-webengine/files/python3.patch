--- ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/cpp_templates/wrapper_class_declaration.tmpl.orig	2021-03-20
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/cpp_templates/wrapper_class_declaration.tmpl	2021-03-20
@@ -37,6 +37,7 @@
   }
 
 {% for constructor in struct|struct_constructors %}
+/* XXX {{ constructor }} {{ constructor.params|length }} {{ constructor.params }} */
   {% if constructor.params|length == 1 %}explicit {% endif %}{{struct.name}}(
 {%-   for field in constructor.params %}
 {%-     set type = field.kind|cpp_wrapper_param_type_new %}
--- ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_cpp_generator.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/mojo/public/tools/bindings/generators/mojom_cpp_generator.py	2021-03-20
@@ -201,10 +201,11 @@
   def __init__(self, fields, params):
     self._fields = fields
     self._params = set(params)
+    self._actualparams = [field for field in self._fields if field in self._params]
 
   @property
   def params(self):
-    return [field for field in self._fields if field in self._params]
+    return self._actualparams
 
   @property
   def fields(self):
@@ -930,6 +931,15 @@
            for field in struct.fields):
       return [StructConstructor(struct.fields, [])]
 
+    if struct.mojom_name == "FilePath":
+        print(struct)
+        print("Versions:" + str(struct.versions))
+        if struct.fields:
+            for f in struct.fields:
+                print("FieldR:" + str(f))
+                print("Fields:" + str(f.Repr()))
+        # raise ValueError("foo")
+
     param_counts = [0]
     for version in struct.versions:
       if param_counts[-1] != version.num_fields:
@@ -937,8 +947,20 @@
 
     ordinal_fields = sorted(
         struct.fields, key=lambda field: field.ordinal or "")
-    return (StructConstructor(struct.fields, ordinal_fields[:param_count])
+    constructor_list = list(StructConstructor(struct.fields, ordinal_fields[:param_count])
             for param_count in param_counts)
+    if struct.mojom_name == "FilePath":
+        print(param_counts)
+        print(ordinal_fields)
+        print(constructor_list)
+        for c in constructor_list:
+            print("ConR:" + str(c))
+            print("Params:" + str(c.params))
+            print("_param:" + str(c._params))
+            print("Fields:" + str(c.fields))
+            print("_field:" + str(c._fields))
+        # raise ValueError("Filepath")
+    return constructor_list
 
   def _GetContainerValidateParamsCtorArgs(self, kind):
     if mojom.IsStringKind(kind):
--- ./src/3rdparty/chromium/mojo/public/tools/mojom/mojom/generate/module.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/mojo/public/tools/mojom/mojom/generate/module.py	2021-03-20
@@ -281,6 +281,8 @@
   def __eq__(self, rhs):
     return isinstance(rhs, BuiltinValue) and self.value == rhs.value
 
+  def __hash__(self):
+    return hash(self.value)
 
 class ConstantValue(NamedValue):
   def __init__(self, module, parent_kind, constant):
@@ -291,6 +293,8 @@
   def name(self):
     return self.constant.name
 
+  def __hash__(self):
+    return hash(self.constant.name)
 
 class EnumValue(NamedValue):
   def __init__(self, module, enum, field):
@@ -307,6 +311,8 @@
   def name(self):
     return self.field.name
 
+  def __hash__(self):
+    return hash( ( self.field.name, self.enum ) )
 
 class Constant(object):
   def __init__(self, mojom_name=None, kind=None, value=None, parent_kind=None):
@@ -362,6 +368,9 @@
                  self.attributes) == (rhs.mojom_name, rhs.kind, rhs.ordinal,
                                       rhs.default, rhs.attributes))
 
+  def __hash__(self):
+    return hash( (self.mojom_name, self.kind, self.ordinal, self.default,
+                 0 if self.attributes is None else self.attributes.values()) )
 
 class StructField(Field):
   pass
@@ -392,9 +401,9 @@
   ReferenceKind.AddSharedProperty('name')
   ReferenceKind.AddSharedProperty('native_only')
   ReferenceKind.AddSharedProperty('custom_serializer')
-  ReferenceKind.AddSharedProperty('fields')
-  ReferenceKind.AddSharedProperty('enums')
-  ReferenceKind.AddSharedProperty('constants')
+  # ReferenceKind.AddSharedProperty('fields')
+  # ReferenceKind.AddSharedProperty('enums')
+  # ReferenceKind.AddSharedProperty('constants')
   ReferenceKind.AddSharedProperty('attributes')
 
   def __init__(self, mojom_name=None, module=None, attributes=None):
@@ -411,6 +420,32 @@
     self.enums = []
     self.constants = []
     self.attributes = attributes
+    if mojom_name == "FilePath":
+        print("Created FilePath")
+
+  @property
+  def fields(self):
+    return self.shared_definition["fields"]
+
+  @fields.setter
+  def fields(self, s):
+    self.shared_definition["fields"] = list(s)
+
+  @property
+  def enums(self):
+    return self.shared_definition["enums"]
+
+  @enums.setter
+  def enums(self, s):
+    self.shared_definition["enums"] = list(s)
+
+  @property
+  def constants(self):
+    return self.shared_definition["constants"]
+
+  @constants.setter
+  def constants(self, s):
+    self.shared_definition["constants"] = list(s)
 
   def Repr(self, as_ref=True):
     if as_ref:
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/build_web_idl_database.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/build_web_idl_database.py	2021-03-20
@@ -48,6 +48,7 @@
         was_error_reported[0] = True
         sys.stderr.writelines([message, "\n"])
 
+    print(f"Building database {filepaths}")
     database = web_idl.build_database(
         filepaths=filepaths, report_error=report_error)
 
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/idl_definitions.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/idl_definitions.py	2021-03-20
@@ -394,7 +394,7 @@
             else:
                 raise ValueError('Unrecognized node class: %s' % child_class)
 
-        if len(filter(None, [self.iterable, self.maplike, self.setlike])) > 1:
+        if len(list(filter(None, [self.iterable, self.maplike, self.setlike]))) > 1:
             raise ValueError(
                 'Interface can only have one of iterable<>, maplike<> and setlike<>.'
             )
@@ -510,6 +510,15 @@
 
     def accept(self, visitor):
         visitor.visit_attribute(self)
+
+    def __lt__(self, other):
+        if not isinstance(other, IdlAttribute):
+            raise TypeError("mismatch")
+        if self.name is None and other.name is None:
+            return False
+        if self.name is None:
+            return True
+        return self.name < other.name
 
 
 ################################################################################
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/idl_reader.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/idl_reader.py	2021-03-20
@@ -56,7 +56,7 @@
        - Otherwise, an IDL file is invalid.
     """
     targets = (
-        definitions.interfaces.values() + definitions.dictionaries.values())
+        list(definitions.interfaces.values()) + list(definitions.dictionaries.values()))
     number_of_targets = len(targets)
     if number_of_targets > 1:
         raise Exception(
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/utilities.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/utilities.py	2021-03-20
@@ -210,7 +210,7 @@
 
 def load_interfaces_info_overall_pickle(info_dir):
     with open(os.path.join(info_dir,
-                           'interfaces_info.pickle')) as interface_info_file:
+                           'interfaces_info.pickle'), "rb") as interface_info_file:
         return pickle.load(interface_info_file)
 
 
@@ -238,7 +238,7 @@
     interfaces_info = load_interfaces_info_overall_pickle(info_dir)
     with open(
             os.path.join(info_dir, 'core',
-                         'component_info_core.pickle')) as component_info_file:
+                         'component_info_core.pickle'), "rb") as component_info_file:
         component_info = pickle.load(component_info_file)
     return ComponentInfoProviderCore(interfaces_info, component_info)
 
@@ -247,7 +247,7 @@
     interfaces_info = load_interfaces_info_overall_pickle(info_dir)
     with open(
             os.path.join(info_dir, 'core',
-                         'component_info_core.pickle')) as component_info_file:
+                         'component_info_core.pickle'), "rb") as component_info_file:
         component_info_core = pickle.load(component_info_file)
     with open(
             os.path.join(
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/constructor.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/constructor.py	2021-03-20
@@ -84,12 +84,21 @@
 
     def __init__(self, ir, constructors, owner):
         assert isinstance(ir, ConstructorGroup.IR)
-        assert isinstance(constructors, (list, tuple))
-        assert all(
-            isinstance(constructor, Constructor)
-            for constructor in constructors)
-        assert all(constructor.identifier == ir.identifier
-                   for constructor in constructors)
+        if isinstance(constructors, filter):
+            constructors = list(constructors)
+        try:
+            assert isinstance(constructors, (list, tuple))
+            assert all(
+                isinstance(constructor, Constructor)
+                for constructor in constructors)
+            assert all(constructor.identifier == ir.identifier
+                       for constructor in constructors)
+        except:
+            print(type(constructors))
+            print(constructors)
+            print(list(isinstance(constructor, Constructor)
+                for constructor in constructors))
+            raise
 
         components = functools.reduce(
             lambda s, constructor: s.union(constructor.components),
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/dictionary.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/dictionary.py	2021-03-20
@@ -18,6 +18,9 @@
 from .reference import RefById
 from .user_defined_type import UserDefinedType
 
+def bogus_gen(n):
+    yield 1
+    yield n
 
 class Dictionary(UserDefinedType, WithExtendedAttributes,
                  WithCodeGeneratorInfo, WithExposure, WithComponent,
@@ -34,11 +37,21 @@
                      extended_attributes=None,
                      component=None,
                      debug_info=None):
+            # Ideally, hunt down where the map() is getting into the system
+            if isinstance(own_members,type(bogus_gen(0))) or isinstance(own_members,map):
+                own_members = list(own_members)
             assert isinstance(is_partial, bool)
             assert inherited is None or isinstance(inherited, RefById)
-            assert isinstance(own_members, (list, tuple)) and all(
-                isinstance(member, DictionaryMember.IR)
-                for member in own_members)
+            try:
+                assert isinstance(own_members, (list, tuple)) and all(
+                    isinstance(member, DictionaryMember.IR)
+                    for member in own_members)
+            except:
+                print(type(own_members))
+                print(own_members)
+                print(isinstance(member, DictionaryMember.IR)
+                    for member in own_members)
+                raise
 
             kind = (IRMap.IR.Kind.PARTIAL_DICTIONARY
                     if is_partial else IRMap.IR.Kind.DICTIONARY)
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/exposure.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/exposure.py	2021-03-20
@@ -9,7 +9,8 @@
     """Represents a runtime-enabled feature."""
 
     def __init__(self, value):
-        str.__init__(self, value)
+        super(str,self).__init__()
+        self._value = value
         self._is_context_dependent = (
             RuntimeEnabledFeatures.is_context_dependent(self))
 
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/extended_attribute.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/extended_attribute.py	2021-03-20
@@ -169,11 +169,20 @@
     """
 
     def __init__(self, extended_attributes=None):
-        assert (extended_attributes is None
-                or isinstance(extended_attributes, ExtendedAttributes)
-                or (isinstance(extended_attributes, (list, tuple)) and all(
-                    isinstance(attr, ExtendedAttribute)
-                    for attr in extended_attributes)))
+        if isinstance(extended_attributes, filter):
+            extended_attributes = list(extended_attributes)
+        try:
+            assert (extended_attributes is None
+                    or isinstance(extended_attributes, ExtendedAttributes)
+                    or (isinstance(extended_attributes, (list, tuple)) and all(
+                        isinstance(attr, ExtendedAttribute)
+                        for attr in extended_attributes)))
+        except:
+            print(type(extended_attributes))
+            print(extended_attributes)
+            print(isinstance(attr, ExtendedAttribute)
+                        for attr in extended_attributes)
+            raise
 
         sorted_ext_attrs = sorted(
             extended_attributes or [], key=lambda x: x.key)
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/idl_compiler.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/idl_compiler.py	2021-03-20
@@ -344,6 +344,8 @@
 
     def _merge_interface_like_irs(self, old_irs_to_merge):
         for old_ir, irs_to_be_merged in old_irs_to_merge:
+            if isinstance(old_ir, filter):
+                old_ir=list(old_ir)
             new_ir = make_copy(old_ir)
             self._ir_map.add(new_ir)
             for ir in irs_to_be_merged:
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/idl_type.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/idl_type.py	2021-03-20
@@ -1127,8 +1127,17 @@
                  extended_attributes=None,
                  debug_info=None,
                  pass_key=None):
-        assert isinstance(member_types, (list, tuple))
-        assert all(isinstance(member, IdlType) for member in member_types)
+        if isinstance(member_types, map):
+            member_types = list(member_types)
+        try:
+            assert isinstance(member_types, (list, tuple))
+            assert all(isinstance(member, IdlType) for member in member_types)
+        except:
+            print(type(member_types))
+            print(member_types)
+            print(list(isinstance(member, IdlType) for member in member_types))
+            raise
+
         IdlType.__init__(
             self,
             is_optional=is_optional,
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/interface.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/interface.py	2021-03-20
@@ -123,6 +123,8 @@
             self.maplike = maplike
             self.setlike = setlike
 
+            print(f"IR id={identifier} ops={operations}")
+
         def iter_all_members(self):
             for attribute in self.attributes:
                 yield attribute
@@ -163,8 +165,8 @@
         self._constructor_groups = tuple([
             ConstructorGroup(
                 group_ir,
-                filter(lambda x: x.identifier == group_ir.identifier,
-                       self._constructors),
+                list(filter(lambda x: x.identifier == group_ir.identifier,
+                       self._constructors)),
                 owner=self) for group_ir in ir.constructor_groups
         ])
         assert len(self._constructor_groups) <= 1
@@ -175,8 +177,8 @@
         self._named_constructor_groups = tuple([
             ConstructorGroup(
                 group_ir,
-                filter(lambda x: x.identifier == group_ir.identifier,
-                       self._named_constructors),
+                list(filter(lambda x: x.identifier == group_ir.identifier,
+                       self._named_constructors)),
                 owner=self) for group_ir in ir.named_constructor_groups
         ])
         self._operations = tuple([
@@ -186,28 +188,30 @@
         self._operation_groups = tuple([
             OperationGroup(
                 group_ir,
-                filter(lambda x: x.identifier == group_ir.identifier,
-                       self._operations),
+                list(filter(lambda x: x.identifier == group_ir.identifier,
+                       self._operations)),
                 owner=self) for group_ir in ir.operation_groups
         ])
         self._exposed_constructs = tuple(ir.exposed_constructs)
         self._legacy_window_aliases = tuple(ir.legacy_window_aliases)
         self._indexed_and_named_properties = None
         if ir.indexed_and_named_properties:
-            operations = filter(
+            operations = list(filter(
                 lambda x: x.is_indexed_or_named_property_operation,
-                self._operations)
+                self._operations))
             self._indexed_and_named_properties = IndexedAndNamedProperties(
                 ir.indexed_and_named_properties, operations, owner=self)
         self._stringifier = None
         if ir.stringifier:
-            operations = filter(lambda x: x.is_stringifier, self._operations)
+            print(f"Interface {ir.identifier} applying stringifier")
+            operations = list(filter(lambda x: x.is_stringifier, self._operations))
+            print(f".. ops {operations}")
             assert len(operations) == 1
             attributes = [None]
             if ir.stringifier.attribute:
                 attr_id = ir.stringifier.attribute.identifier
-                attributes = filter(lambda x: x.identifier == attr_id,
-                                    self._attributes)
+                attributes = list(filter(lambda x: x.identifier == attr_id,
+                                    self._attributes))
             assert len(attributes) == 1
             self._stringifier = Stringifier(
                 ir.stringifier,
@@ -427,9 +431,14 @@
 
     def __init__(self, ir, operations, owner):
         assert isinstance(ir, IndexedAndNamedProperties.IR)
-        assert isinstance(operations, (list, tuple))
-        assert all(
-            isinstance(operation, Operation) for operation in operations)
+        try:
+            assert isinstance(operations, (list, tuple))
+            assert all(
+                isinstance(operation, Operation) for operation in operations)
+        except:
+            print(type(operations))
+            print(operations)
+            print(isinstance(operation, Operation) for operation in operations)
 
         WithOwner.__init__(self, owner)
         WithDebugInfo.__init__(self, ir)
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/ir_builder.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/ir_builder.py	2021-03-20
@@ -166,7 +166,7 @@
         child_nodes = list(node.GetChildren())
         extended_attributes = self._take_extended_attributes(child_nodes)
 
-        members = map(self._build_interface_member, child_nodes)
+        members = list(map(self._build_interface_member, child_nodes))
         attributes = []
         constants = []
         operations = []
@@ -308,7 +308,7 @@
         child_nodes = list(node.GetChildren())
         inherited = self._take_inheritance(child_nodes)
         extended_attributes = self._take_extended_attributes(child_nodes)
-        own_members = map(self._build_dictionary_member, child_nodes)
+        own_members = list(map(self._build_dictionary_member, child_nodes))
 
         return Dictionary.IR(
             identifier=Identifier(node.GetName()),
@@ -342,7 +342,7 @@
 
         child_nodes = list(node.GetChildren())
         extended_attributes = self._take_extended_attributes(child_nodes)
-        members = map(self._build_interface_member, child_nodes)
+        members = list(map(self._build_interface_member, child_nodes))
         constants = []
         operations = []
         for member in members:
@@ -462,8 +462,8 @@
                 assert len(child_nodes) == 1
                 child = child_nodes[0]
                 if child.GetClass() == 'Arguments':
-                    arguments = map(build_extattr_argument,
-                                    child.GetChildren())
+                    arguments = list(map(build_extattr_argument,
+                                    child.GetChildren()))
                 elif child.GetClass() == 'Call':
                     assert len(child.GetChildren()) == 1
                     grand_child = child.GetChildren()[0]
@@ -492,7 +492,7 @@
 
         assert node.GetClass() == 'ExtAttributes'
         return ExtendedAttributes(
-            filter(None, map(build_extended_attribute, node.GetChildren())))
+            list(filter(None, map(build_extended_attribute, node.GetChildren()))))
 
     def _build_inheritance(self, node):
         assert node.GetClass() == 'Inherit'
@@ -512,7 +512,7 @@
 
     def _build_iterable(self, node):
         assert node.GetClass() == 'Iterable'
-        types = map(self._build_type, node.GetChildren())
+        types = list(map(self._build_type, node.GetChildren()))
         if len(types) == 1:
             types.insert(0, None)
         assert len(types) == 2
@@ -547,7 +547,7 @@
         elif type_token == 'integer':
             idl_type = factory.simple_type(name='long', debug_info=debug_info)
             assert isinstance(value_token, str)
-            value = long(value_token, base=0)
+            value = int(value_token, base=0)
             literal = value_token
         elif type_token == 'float':
             idl_type = factory.simple_type(
@@ -582,7 +582,7 @@
 
     def _build_maplike(self, node):
         assert node.GetClass() == 'Maplike'
-        types = map(self._build_type, node.GetChildren())
+        types = list(map(self._build_type, node.GetChildren()))
         assert len(types) == 2
         return Maplike(
             key_type=types[0],
@@ -685,7 +685,7 @@
 
         def build_union_type(node, extended_attributes):
             return self._idl_type_factory.union_type(
-                member_types=map(self._build_type, node.GetChildren()),
+                member_types=list(map(self._build_type, node.GetChildren())),
                 is_optional=is_optional,
                 extended_attributes=extended_attributes,
                 debug_info=self._build_debug_info(node))
--- ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/make_copy.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/bindings/scripts/web_idl/make_copy.py	2021-03-20
@@ -16,7 +16,7 @@
         memo = dict()
 
     if (obj is None
-            or isinstance(obj, (bool, int, long, float, complex, basestring))):
+            or isinstance(obj, (bool, int, float, complex, str))):
         # Do not make a copy if the object is of an immutable primitive type
         # (or its subclass).
         #
@@ -27,6 +27,9 @@
 
     if hasattr(obj, 'make_copy'):
         return obj.make_copy(memo=memo)
+
+    if isinstance(obj, filter):
+        obj = list(obj)
 
     memoizable = obj.__hash__ is not None
 
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/core/css/make_style_shorthands.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/core/css/make_style_shorthands.py	2021-03-20
@@ -53,10 +53,10 @@
 
         self._longhand_dictionary = defaultdict(list)
         for property_ in json5_properties.shorthands:
-            property_['longhand_enum_keys'] = map(enum_key_for_css_property,
-                                                  property_['longhands'])
-            property_['longhand_property_ids'] = map(id_for_css_property,
-                                                     property_['longhands'])
+            property_['longhand_enum_keys'] = list(map(enum_key_for_css_property,
+                                                  property_['longhands']))
+            property_['longhand_property_ids'] = list(map(id_for_css_property,
+                                                     property_['longhands']))
             for longhand_enum_key in property_['longhand_enum_keys']:
                 self._longhand_dictionary[longhand_enum_key].append(property_)
 
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/core/css/properties/make_css_property_instances.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/core/css/properties/make_css_property_instances.py	2021-03-20
@@ -42,8 +42,8 @@
         aliases = self._css_properties.aliases
 
         # Lists of PropertyClassData.
-        self._property_classes_by_id = map(self.get_class, properties)
-        self._alias_classes_by_id = map(self.get_class, aliases)
+        self._property_classes_by_id = list(map(self.get_class, properties))
+        self._alias_classes_by_id = list(map(self.get_class, aliases))
 
         # Sort by enum value.
         self._property_classes_by_id.sort(key=lambda t: t.enum_value)
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/gperf.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/gperf.py	2021-03-20
@@ -93,7 +93,7 @@
     # Since we're passing the input file on stdin, remove it from the args.
     gperf_args.remove(infile)
 
-    open(args.output_file, 'wb').write(
+    open(args.output_file, 'w').write(
         generate_gperf(gperf_path,
                        open(infile).read(), gperf_args))
 
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/in_generator.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/in_generator.py	2021-03-20
@@ -78,7 +78,7 @@
     def __init__(self, in_files):
         super(Writer, self).__init__(in_files)
 
-        if isinstance(in_files, basestring):
+        if isinstance(in_files, str):
             in_files = [in_files]
         if in_files:
             self.in_file = InFile.load_from_files(in_files, self.defaults,
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/make_runtime_features.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/make_runtime_features.py	2021-03-20
@@ -138,7 +138,7 @@
                 except Exception:
                     # If trouble unpickling, overwrite
                     pass
-        with open(os.path.abspath(file_name), 'w') as pickle_file:
+        with open(os.path.abspath(file_name), 'wb') as pickle_file:
             pickle.dump(features_map, pickle_file)
 
     def _template_inputs(self):
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/element_factory.cc.tmpl.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/element_factory.cc.tmpl	2021-03-20
@@ -26,7 +26,7 @@
 
 static {{namespace}}FunctionMap* g_{{namespace|lower}}_constructors = nullptr;
 
-{% for tag in tags|sort if not tag.noConstructor %}
+{% for tag in tags|sort(attribute='name') if not tag.noConstructor %}
 static {{namespace}}Element* {{namespace}}{{tag.name.to_upper_camel_case()}}Constructor(
     Document& document, const CreateElementFlags flags) {
   {% if tag.runtimeEnabled %}
@@ -52,7 +52,7 @@
   // Empty array initializer lists are illegal [dcl.init.aggr] and will not
   // compile in MSVC. If tags list is empty, add check to skip this.
   static const Create{{namespace}}FunctionMapData data[] = {
-  {% for tag in tags|sort if not tag.noConstructor %}
+  {% for tag in tags|sort(attribute='name') if not tag.noConstructor %}
     { {{cpp_namespace}}::{{tag|symbol}}Tag, {{namespace}}{{tag.name.to_upper_camel_case()}}Constructor },
   {% endfor %}
   };
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/element_type_helpers.cc.tmpl.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/element_type_helpers.cc.tmpl	2021-03-20
@@ -21,7 +21,7 @@
     const char* name;
     HTMLElementType type;
   } kTags[] = {
-    {% for tag in tags|sort %}
+    {% for tag in tags|sort(attribute='name') %}
     { "{{tag.name}}", HTMLElementType::k{{tag.js_interface}} },
     {% endfor %}
   };
@@ -41,7 +41,7 @@
   if (it == html_type_map.end())
     return HTMLElementType::kHTMLUnknownElement;
 
-  {% for tag in tags|sort %}
+  {% for tag in tags|sort(attribute='name') %}
   {% if tag.runtimeEnabled %}
   if (tagName == "{{tag.name}}") {
     if (!RuntimeEnabledFeatures::{{tag.runtimeEnabled}}Enabled(document)) {
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/element_type_helpers.h.tmpl.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/element_type_helpers.h.tmpl	2021-03-20
@@ -15,7 +15,7 @@
 class Document;
 
 // Type checking.
-{% for tag in tags|sort if not tag.multipleTagNames and not tag.noTypeHelpers %}
+{% for tag in tags|sort(attribute='name') if not tag.multipleTagNames and not tag.noTypeHelpers %}
 class {{tag.interface}};
 template <>
 inline bool IsElementOfType<const {{tag.interface}}>(const Node& node) {
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/macros.tmpl.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/macros.tmpl	2021-03-20
@@ -54,8 +54,12 @@
 switch (data[{{index}}]) {
     {% endif %}
     {% for char, value in trie.items()|sort %}
+{% if value is string %}
+XXX {{ char }} "{{value}}"
+{% else %}
 case '{{char}}':
     {{ trie_switch(value, index + 1, return_macro, lowercase_data) | indent(4) }}
+{% endif %}
     {% endfor %}
 }
 break;
--- ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/make_qualified_names.h.tmpl.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/blink/renderer/build/scripts/templates/make_qualified_names.h.tmpl	2021-03-20
@@ -24,12 +24,12 @@
 {{symbol_export}}extern const WTF::AtomicString& {{namespace_prefix}}NamespaceURI;
 
 // Tags
-{% for tag in tags|sort %}
+{% for tag in tags|sort(attribute='name') %}
 {{symbol_export}}extern const blink::{{namespace}}QualifiedName& {{tag|symbol}}Tag;
 {% endfor %}
 
 // Attributes
-{% for attr in attrs|sort %}
+{% for attr in attrs|sort(attribute='name') %}
 {{symbol_export}}extern const blink::QualifiedName& {{attr|symbol}}Attr;
 {% endfor %}
 
--- ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/build_release_applications.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/build_release_applications.py	2021-03-20
@@ -11,7 +11,7 @@
 - Builds app.html referencing the application script.
 """
 
-from cStringIO import StringIO
+from io import StringIO
 from os import path
 from os.path import join
 import copy
@@ -164,7 +164,7 @@
             resource_name = path.normpath(resource_name).replace('\\', '/')
             output.write('self.Runtime.cachedResources["%s"] = "' % resource_name)
             resource_content = read_file(path.join(self.application_dir, resource_name))
-            resource_content += resource_source_url(resource_name).encode('utf-8')
+            resource_content += resource_source_url(resource_name) # .encode('utf-8')
             resource_content = resource_content.replace('\\', '\\\\')
             resource_content = resource_content.replace('\n', '\\n')
             resource_content = resource_content.replace('"', '\\"')
@@ -191,7 +191,7 @@
     def _concatenate_application_script(self, output):
         output.write('Root.allDescriptors.push(...%s);' % self._release_module_descriptors())
         if self.descriptors.extends:
-            output.write('Root.applicationDescriptor.modules.push(...%s);' % json.dumps(self.descriptors.application.values()))
+            output.write('Root.applicationDescriptor.modules.push(...%s);' % json.dumps(list(self.descriptors.application.values())))
         else:
             output.write('Root.applicationDescriptor = %s;' % self.descriptors.application_json())
 
--- ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/modular_build.py.orig	2021-03-20
+++ ./src/3rdparty/chromium/third_party/devtools-frontend/src/scripts/build/modular_build.py	2021-03-20
@@ -40,7 +40,7 @@
     try:
         return json.loads(read_file(filename))
     except:
-        print 'ERROR: Failed to parse %s' % filename
+        print( 'ERROR: Failed to parse %s' % filename )
         raise
 
 
@@ -68,9 +68,13 @@
 
     def application_json(self):
         result = dict()
-        result['modules'] = self.application.values()
+        result['modules'] = list(self.application.values())
         result['has_html'] = self.has_html
-        return json.dumps(result)
+        try:
+            return json.dumps(result)
+        except:
+            print(repr(result))
+            raise
 
     def all_compiled_files(self):
         files = collections.OrderedDict()
